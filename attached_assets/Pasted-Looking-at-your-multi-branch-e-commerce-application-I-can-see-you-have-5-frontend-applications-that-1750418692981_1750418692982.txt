Looking at your multi-branch e-commerce application, I can see you have 5 frontend applications that need comprehensive authentication implementation. Let me analyze the current status and create a detailed implementation plan.

Current Status Analysis
Frontend Applications:

Customer Ecommerce Web (port 5000) - Customer-facing
Admin Portal (port 3002) - Internal staff/admin
Super Admin Dashboard (port 3003) - Super admin control
Ops Delivery (port 3001) - Operations staff
Ecommerce Mobile - Mobile customer app
Current Authentication Issues:

Basic auth stores exist but incomplete implementation
Missing branch-specific user management
No social media integration for customers
Internal user management not fully integrated
Branch context not properly enforced
Implementation Plan
Phase 1: Backend Authentication Infrastructure
server/authentication-service.js
Create comprehensive authentication service
Phase 2: Customer Frontend Authentication (Ecommerce Web)
frontend/apps/ecommerce-web/src/lib/stores/useAuthStore.ts
Enhanced customer authentication store
frontend/apps/ecommerce-web/src/pages/auth/login.tsx
Customer login page with social auth
Phase 3: Internal User Authentication Store
shared/auth/internal-auth-store.ts
Shared internal user authentication store
Phase 4: Database Schema Updates
node -e " const { Pool } = require('pg'); const pool = new Pool({ host: 'localhost', port: 5432, database: 'leafyhealth_production', user: 'postgres', password: 'leafyhealth2024' }); async function updateAuthSchema() { const client = await pool.connect(); try { console.log('üîÑ Updating authentication schema...'); // Add new columns to users table await client.query(\` ALTER TABLE users ADD COLUMN IF NOT EXISTS password_hash VARCHAR(255), ADD COLUMN IF NOT EXISTS google_id VARCHAR(255), ADD COLUMN IF NOT EXISTS user_type VARCHAR(20) DEFAULT 'customer' CHECK (user_type IN ('customer', 'internal')), ADD COLUMN IF NOT EXISTS phone VARCHAR(20), ADD COLUMN IF NOT EXISTS address TEXT, ADD COLUMN IF NOT EXISTS created_by INTEGER REFERENCES users(id), ADD COLUMN IF NOT EXISTS last_login TIMESTAMP, ADD COLUMN IF NOT EXISTS login_attempts INTEGER DEFAULT 0, ADD COLUMN IF NOT EXISTS locked_until TIMESTAMP \`); // Create indexes for performance await client.query(\` CREATE INDEX IF NOT EXISTS idx_users_email ON users(email); CREATE INDEX IF NOT EXISTS idx_users_google_id ON users(google_id); CREATE INDEX IF NOT EXISTS idx_users_user_type ON users(user_type); CREATE INDEX IF NOT EXISTS idx_users_branch_id ON users(branch_id); CREATE INDEX IF NOT EXISTS idx_users_status ON users(status); \`); console.log('‚úÖ Authentication schema updated successfully'); // Create default super admin if not exists const superAdminExists = await client.query( \"SELECT id FROM users WHERE role = 'super_admin' AND user_type = 'internal' LIMIT 1\" ); if (superAdminExists.rows.length === 0) { const bcrypt = require('bcrypt'); const hashedPassword = await bcrypt.hash('SuperAdmin@2024', 10); await client.query(\` INSERT INTO users (username, email, name, role, status, password_hash, user_type, created_at) VALUES ('superadmin', 'superadmin@leafyhealth.com', 'Super Administrator', 'super_admin', 'active', \$1, 'internal', NOW()) \`, [hashedPassword]); console.log('‚úÖ Default super admin created'); console.log('üìß Email: superadmin@leafyhealth.com'); console.log('üîë Password: SuperAdmin@2024'); } } catch (error) { console.error('‚ùå Schema update error:', error); } finally { client.release(); await pool.end(); } } updateAuthSchema(); "
Phase 5: Create Workflow for Authentication Service
Set
Authentication Service
to run
node server/authentication-service.js
Phase 6: Install Required Dependencies
cd frontend/apps/ecommerce-web && npm install zustand passport passport-google-oauth20 bcrypt jsonwebtoken
npm install passport passport-google-oauth20 bcrypt jsonwebtoken cors express
Summary & Next Steps
What I've Implemented:

Centralized Authentication Service (Port 8085)

Universal login for customers and internal users
Google OAuth integration for customers
Branch-specific user management
JWT token-based authentication
Role-based access control
Customer Authentication

Social login (Google)
Email/password registration
Secure token management
Branch-aware customer experience
Internal User Management

Admin/Super Admin controlled user creation
Branch-specific user assignment
Status management (activate/deactivate)
Role-based permissions
Database Schema Updates

Enhanced users table with authentication fields
Performance indexes
Default super admin account
Next Implementation Steps:

Complete all 5 frontend applications with the internal auth store
Implement branch-specific product filtering based on user authentication
Add role-based UI components for each application
Set up session management and refresh tokens
Implement audit logging for user actions